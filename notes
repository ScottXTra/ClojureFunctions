repeatedly => runs a funtion (param 1) infinte times

take => takes the first n (param 1) items from a seq (param 2) 

range => generate a seq from (param 1) to (param 2) with and optinal step of (param 3)

iterate => applys function (param 1) to (param 2) repeatedly swaping in the result of (param 1) on (param 2) to be the new (param 2)

repeat => returns an infinite seq of (param 1) [Offten used with "take"]

cycle => returns a seq of (param 1) infinitly repeated [Offten used with "take"]

interleave => returns a seq of elements of seq (param 1) and seq (param 2) alternating elements untill one seq runs out

interpose => returns a seq of elements in seq (param 2) alternating elements with (param 1) 

when => format (when (condition) returnSeq) basicly just if I guess?????

deseq (powerfull af) => example (doseq [x (seq)] (do operations on seq, x is each value in seq) )

filter => returns a seq of every item in a seq list that returned true when passed to the predicate. example: (filter even? '(1,2,3,3,4,5,6)) returns (2 4 6)

take-while => takes all items from a seq up to the point where the pred funtion returns false for the first time and returns them in a seq

drop-while => drops all items from a seq up to the point where the pred funtion returns false for the first time and returns them in a seq

split-at => splits a seq into 2 new lazy-seqs at a given index. example (split-at 5 (range 10)) => [(0 1 2 3 4) (5 6 7 8 9)]

every? => check to see if the pred function returns true for every item in the list if so return true if not reuturn false

some => check to see if the pred function returns true for some of the items in the list if so return true if not return false. (retunrs the first item that causes a true return fro mthe pred)

map => returns a new collection with the pred apllyed to every element. example (map inc '(1 2 3 4 5 6)) => (2 3 4 5 6 7)