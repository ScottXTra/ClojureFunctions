repeatedly => runs a funtion (param 1) infinte times

take => takes the first n (param 1) items from a seq (param 2) 

range => generate a seq from (param 1) to (param 2) with and optinal step of (param 3)

iterate => applys function (param 1) to (param 2) repeatedly swaping in the result of (param 1) on (param 2) to be the new (param 2)

repeat => returns an infinite seq of (param 1) [Offten used with "take"]

cycle => returns a seq of (param 1) infinitly repeated [Offten used with "take"]

interleave => returns a seq of elements of seq (param 1) and seq (param 2) alternating elements untill one seq runs out

interpose => returns a seq of elements in seq (param 2) alternating elements with (param 1) 

when => format (when (condition) returnSeq) basicly just if I guess?????

deseq (powerfull af) => example (doseq [x (seq)] (do operations on seq, x is each value in seq) )

filter => returns a seq of every item in a seq list that returned true when passed to the predicate. example: (filter even? '(1,2,3,3,4,5,6)) returns (2 4 6)